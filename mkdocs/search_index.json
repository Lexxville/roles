{
    "docs": [
        {
            "location": "/",
            "text": "Roles for Laravel 5.4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPowerful package for handling roles in Laravel\n\n\nHistory\n\n\nThis project was largely inspired by Roman's \nromanbican/roles\n Laravel package. However at the time Laravel 5.3 was released his package was not actively maintained. I have ommitted permissions in this package in favour of Laravel's \nAuthorization\n. I intend to keep this package as simple and minimal as is possible.",
            "title": "Home"
        },
        {
            "location": "/#roles-for-laravel-54",
            "text": "Powerful package for handling roles in Laravel",
            "title": "Roles for Laravel 5.4"
        },
        {
            "location": "/#history",
            "text": "This project was largely inspired by Roman's  romanbican/roles  Laravel package. However at the time Laravel 5.3 was released his package was not actively maintained. I have ommitted permissions in this package in favour of Laravel's  Authorization . I intend to keep this package as simple and minimal as is possible.",
            "title": "History"
        },
        {
            "location": "/installation/",
            "text": "This package is very easy to set up. There are only couple of steps.\n\n\nComposer\n\n\nRun this command inside your terminal to add the package into your project.\n\n\ncomposer require httpoz/roles",
            "title": "Installation"
        },
        {
            "location": "/installation/#composer",
            "text": "Run this command inside your terminal to add the package into your project.  composer require httpoz/roles",
            "title": "Composer"
        },
        {
            "location": "/configuration/",
            "text": "Register the Roles Service Provider\n\n\nAdd the package to your application service providers in \nconfig/app.php\n file.\n\n\n'providers' => [\n\n    /*\n     * Laravel Framework Service Providers...\n     */\n    Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::class,\n    Illuminate\\Auth\\AuthServiceProvider::class,\n    ...\n\n    /**\n     * Package Service Providers...\n     */\n    HttpOz\\Roles\\RolesServiceProvider::class,\n\n],\n\n\n\n\nPublish Config File And Migrations\n\n\nPublish the package config file and migrations to your application. Run this command inside your terminal.\n\n\nphp artisan vendor:publish --provider=\"HttpOz\\Roles\\RolesServiceProvider\"\n\n\n\nAnd also run migrations.\n\n\nphp artisan migrate\n\n\n\n\n\nThis uses the default users table which is in Laravel. You should already have the migration file for the users table available and migrated.\n\n\n\n\nEnable HasRole Trait And Contract\n\n\nInclude \nHasRole\n trait and also implement \nHasRole\n contract inside your \nUser\n model.\n\n\nuse HttpOz\\Roles\\Traits\\HasRole;\nuse HttpOz\\Roles\\Contracts\\HasRole as HasRoleContract;\n\nclass User extends Authenticatable implements HasRoleContract\n{\n    use Notifiable, HasRole;\n\n\n\n\nAnd that's it!\n\n\nConfig File\n\n\nYou can change connection for models, slug separator, models path and there is also a handy pretend feature. Have a look at config file for more information.",
            "title": "Configuration"
        },
        {
            "location": "/configuration/#register-the-roles-service-provider",
            "text": "Add the package to your application service providers in  config/app.php  file.  'providers' => [\n\n    /*\n     * Laravel Framework Service Providers...\n     */\n    Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::class,\n    Illuminate\\Auth\\AuthServiceProvider::class,\n    ...\n\n    /**\n     * Package Service Providers...\n     */\n    HttpOz\\Roles\\RolesServiceProvider::class,\n\n],",
            "title": "Register the Roles Service Provider"
        },
        {
            "location": "/configuration/#publish-config-file-and-migrations",
            "text": "Publish the package config file and migrations to your application. Run this command inside your terminal.  php artisan vendor:publish --provider=\"HttpOz\\Roles\\RolesServiceProvider\"  And also run migrations.  php artisan migrate   This uses the default users table which is in Laravel. You should already have the migration file for the users table available and migrated.",
            "title": "Publish Config File And Migrations"
        },
        {
            "location": "/configuration/#enable-hasrole-trait-and-contract",
            "text": "Include  HasRole  trait and also implement  HasRole  contract inside your  User  model.  use HttpOz\\Roles\\Traits\\HasRole;\nuse HttpOz\\Roles\\Contracts\\HasRole as HasRoleContract;\n\nclass User extends Authenticatable implements HasRoleContract\n{\n    use Notifiable, HasRole;  And that's it!",
            "title": "Enable HasRole Trait And Contract"
        },
        {
            "location": "/configuration/#config-file",
            "text": "You can change connection for models, slug separator, models path and there is also a handy pretend feature. Have a look at config file for more information.",
            "title": "Config File"
        },
        {
            "location": "/roles/",
            "text": "Creating Roles\n\n\nThe common practice for creating roles would be to create a seed file and place your role definitions in that file. In the example below we are defining two roles \nAdmin\n and \nForum Moderator\n that will be created when we run \nphp artisan db:seed\n.\n\n\nuse HttpOz\\Roles\\Models\\Role;\n\n$adminRole = Role::create([\n    'name' => 'Admin',\n    'slug' => 'admin',\n    'description' => '', // optional\n    'group' => 'default', // optional, set as 'default' by default\n]);\n\n$moderatorRole = Role::create([\n    'name' => 'Forum Moderator',\n    'slug' => 'forum.moderator',\n]);\n\n\n\n\n\n\nBecause of \nSluggable\n trait, if you make a mistake and for example leave a space in slug parameter, it'll be replaced with a dot automatically, because of \nstr_slug\n function.\n\n\n\n\nAttaching, Syncing And Detaching Roles\n\n\nIt's really simple. You fetch a user from database and call \nattachRole\n method. There is \nBelongsToMany\n relationship between \nUser\n and \nRole\n model.\nLearn about \nMany To Many Relationships\n\n\nuse App\\User;\n\n$user = User::find($id);\n\n$user->attachRole($adminRole); // you can pass whole object, or just an id\n$user->detachRole($adminRole); // in case you want to detach role\n$user->detachAllRoles(); // in case you want to detach all roles\n$user->syncRoles($roles); // you can pass Eloquent collection, or just an array of ids\n\n\n\n\nChecking For Roles\n\n\nYou can now check if the user has required role.\n\n\nif ($user->isRole('admin')) { // you can pass an id or slug\n    // or alternatively $user->hasRole('admin')\n}\n\n\n\n\nYou can also do this:\n\n\nif ($user->isAdmin()) {\n    //\n}\n\n\n\n\nAnd of course, there is a way to check for multiple roles:\n\n\nif ($user->isRole('admin|moderator')) {\n    /*\n    | Or alternatively:\n    | $user->isRole('admin, moderator'), $user->isRole(['admin', 'moderator']),\n    | $user->isOne('admin|moderator'), $user->isOne('admin, moderator'), $user->isOne(['admin', 'moderator'])\n    */\n\n    // if user has at least one role\n}\n\nif ($user->isRole('admin|moderator', true)) {\n    /*\n    | Or alternatively:\n    | $user->isRole('admin, moderator', true), $user->isRole(['admin', 'moderator'], true),\n    | $user->isAll('admin|moderator'), $user->isAll('admin, moderator'), $user->isAll(['admin', 'moderator'])\n    */\n\n    // if user has all roles\n}\n\n\n\n\nFind users by their role\n\n\nThere are multiple ways to get a list of users by their given role.\n\n\nUsing the role's id\n\n \nphp\n $admins = Role::find(1)->users;\n\n\nUsing the role's slug\n\n \nphp\n $adminRole = Role::where('slug', 'admin')->first();\n $admins = $role->users;\n\n \nUsing the role's group\n\n \nphp\n $adminRole = Role::where('group', 'application.managers')->first();\n $admins = $role->users;",
            "title": "Roles"
        },
        {
            "location": "/roles/#creating-roles",
            "text": "The common practice for creating roles would be to create a seed file and place your role definitions in that file. In the example below we are defining two roles  Admin  and  Forum Moderator  that will be created when we run  php artisan db:seed .  use HttpOz\\Roles\\Models\\Role;\n\n$adminRole = Role::create([\n    'name' => 'Admin',\n    'slug' => 'admin',\n    'description' => '', // optional\n    'group' => 'default', // optional, set as 'default' by default\n]);\n\n$moderatorRole = Role::create([\n    'name' => 'Forum Moderator',\n    'slug' => 'forum.moderator',\n]);   Because of  Sluggable  trait, if you make a mistake and for example leave a space in slug parameter, it'll be replaced with a dot automatically, because of  str_slug  function.",
            "title": "Creating Roles"
        },
        {
            "location": "/roles/#attaching-syncing-and-detaching-roles",
            "text": "It's really simple. You fetch a user from database and call  attachRole  method. There is  BelongsToMany  relationship between  User  and  Role  model.\nLearn about  Many To Many Relationships  use App\\User;\n\n$user = User::find($id);\n\n$user->attachRole($adminRole); // you can pass whole object, or just an id\n$user->detachRole($adminRole); // in case you want to detach role\n$user->detachAllRoles(); // in case you want to detach all roles\n$user->syncRoles($roles); // you can pass Eloquent collection, or just an array of ids",
            "title": "Attaching, Syncing And Detaching Roles"
        },
        {
            "location": "/roles/#checking-for-roles",
            "text": "You can now check if the user has required role.  if ($user->isRole('admin')) { // you can pass an id or slug\n    // or alternatively $user->hasRole('admin')\n}  You can also do this:  if ($user->isAdmin()) {\n    //\n}  And of course, there is a way to check for multiple roles:  if ($user->isRole('admin|moderator')) {\n    /*\n    | Or alternatively:\n    | $user->isRole('admin, moderator'), $user->isRole(['admin', 'moderator']),\n    | $user->isOne('admin|moderator'), $user->isOne('admin, moderator'), $user->isOne(['admin', 'moderator'])\n    */\n\n    // if user has at least one role\n}\n\nif ($user->isRole('admin|moderator', true)) {\n    /*\n    | Or alternatively:\n    | $user->isRole('admin, moderator', true), $user->isRole(['admin', 'moderator'], true),\n    | $user->isAll('admin|moderator'), $user->isAll('admin, moderator'), $user->isAll(['admin', 'moderator'])\n    */\n\n    // if user has all roles\n}",
            "title": "Checking For Roles"
        },
        {
            "location": "/roles/#find-users-by-their-role",
            "text": "There are multiple ways to get a list of users by their given role.  Using the role's id \n  php\n $admins = Role::find(1)->users;  Using the role's slug \n  php\n $adminRole = Role::where('slug', 'admin')->first();\n $admins = $role->users; \n  Using the role's group \n  php\n $adminRole = Role::where('group', 'application.managers')->first();\n $admins = $role->users;",
            "title": "Find users by their role"
        },
        {
            "location": "/groups/",
            "text": "When you are creating roles, there is optional parameter \ngroup\n. It is set as \ndefault\n by default, but you can overwrite it and then you can do something like this:\n\n\nif ($user->group() == 'application.managers') {\n    //\n}\n\n\n\n\n\n\nIf user has multiple roles, method \ngroup\n returns the first one in alphabetical order (a better implementation of this will be explored).\n\n\n\n\nGroup\n is intended to collectively organise and assign permissions (Laravel's built in authorization feature) to a role group that can be shared by multiple roles (examples and implementation to be added to documentation in future).",
            "title": "Groups"
        },
        {
            "location": "/middleware/",
            "text": "This package comes with \nVerifyRole\n and \nVerifyGroup\n middleware. You must add them inside your \napp/Http/Kernel.php\n file.\n\n\n/**\n * The application's route middleware.\n *\n * @var array\n */\nprotected $routeMiddleware = [\n\n    // ...\n\n    'role' => \\HttpOz\\Roles\\Middleware\\VerifyRole::class,\n    'group' => \\HttpOz\\Roles\\Middleware\\VerifyGroup::class,\n];\n\n\n\n\nNow you can easily protect your routes.\n\n\n$router->get('/example', [\n    'as' => 'example',\n    'middleware' => 'role:admin',\n    'uses' => 'ExampleController@index',\n]);\n\n$router->get('/example', [\n    'as' => 'example',\n    'middleware' => 'group:application.managers',\n    'uses' => 'ExampleController@index',\n]);\n\n\n\n\nIt throws \n\\HttpOz\\Roles\\Exceptions\\RoleDeniedException\n or \n\\HttpOz\\Roles\\Exceptions\\GoupDeniedException\n exceptions if it goes wrong.\n\n\nYou can catch these exceptions inside \napp/Exceptions/Handler.php\n file and do whatever you want, example below.",
            "title": "Middleware"
        },
        {
            "location": "/displaying-errors/",
            "text": "Extending from the above, you can control the error page that your application users see when they try to open a page their role is not allowed to. This package already has a view bundled with it that should have been published to \nresources/views/vendor/roles/error.blade.php\n when you published the package. Simply add the below condition inside your \napp\\Exceptions\\Handler.php\n's render function. Feel free to point to another view of your choice.\n\n\n/**\n     * Render an exception into an HTTP response.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  \\Exception  $exception\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function render($request, Exception $exception)\n    {\n        if ($exception instanceof \\HttpOz\\Roles\\Exceptions\\RoleDeniedException || $exception instanceof \\HttpOz\\Roles\\Exceptions\\GroupDeniedException) {\n            return response()->view('vendor.roles.error', compact('exception'), 403);\n        }\n\n        return parent::render($request, $exception);\n    }",
            "title": "Displaying Errors"
        },
        {
            "location": "/blade-syntax/",
            "text": "There are two Blade extensions that are basically a replacement for classic if statements.\n\n\n@role('admin') // @if(Auth::check() && Auth::user()->isRole('admin'))\n    // user is admin\n@endrole\n\n@group('application.managers') // @if(Auth::check() && Auth::user()->group() == 'application.managers')\n    // user belongs to 'application.managers' group\n@endgroup\n\n@role('admin|moderator', 'all') // @if(Auth::check() && Auth::user()->isRole('admin|moderator', 'all'))\n    // user is admin and also moderator\n@else\n    // something else\n@endrole",
            "title": "Blade Syntax"
        }
    ]
}