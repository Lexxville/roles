{
    "docs": [
        {
            "location": "/",
            "text": "Roles for Laravel 5.4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPowerful package for handling roles in Laravel\n\n\nHistory\n\n\nThis project was largely inspired by Roman's \nromanbican/roles\n Laravel package. However at the time Laravel 5.3 was released his package was not actively maintained. I have ommitted permissions in this package in favour of Laravel's \nAuthorization\n. I intend to keep this package as simple and minimal as is possible.",
            "title": "Home"
        },
        {
            "location": "/#roles-for-laravel-54",
            "text": "Powerful package for handling roles in Laravel",
            "title": "Roles for Laravel 5.4"
        },
        {
            "location": "/#history",
            "text": "This project was largely inspired by Roman's  romanbican/roles  Laravel package. However at the time Laravel 5.3 was released his package was not actively maintained. I have ommitted permissions in this package in favour of Laravel's  Authorization . I intend to keep this package as simple and minimal as is possible.",
            "title": "History"
        },
        {
            "location": "/installation/",
            "text": "This package is very easy to set up. There are only couple of steps.\n\n\nComposer\n\n\nRun this command inside your terminal to add the package into your project.\n\n\ncomposer require httpoz/roles",
            "title": "Installation"
        },
        {
            "location": "/installation/#composer",
            "text": "Run this command inside your terminal to add the package into your project.  composer require httpoz/roles",
            "title": "Composer"
        },
        {
            "location": "/configuration/",
            "text": "Register the Roles Service Provider\n\n\nAdd the package to your application service providers in \nconfig/app.php\n file.\n\n\n'providers' => [\n\n\n\n    /*\n\n\n     * Laravel Framework Service Providers...\n\n\n     */\n\n\n    Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::class,\n\n\n    Illuminate\\Auth\\AuthServiceProvider::class,\n\n\n    ...\n\n\n\n    /**\n\n\n     * Package Service Providers...\n\n\n     */\n\n\n    HttpOz\\Roles\\RolesServiceProvider::class,\n\n\n\n],\n\n\n\n\n\nPublish Config File And Migrations\n\n\nOptimize Application\n\n\nphp artisan optimize\n\n\n\n\nPublish the package config file and migrations to your application. Run this command inside your terminal.\n\n\nphp artisan vendor:publish --provider=\"HttpOz\\Roles\\RolesServiceProvider\"\n\n\n\n\nAnd also run migrations.\n\n\nphp artisan migrate\n\n\n\n\n\n\nThis uses the default users table which is in Laravel. You should already have the migration file for the users table available and migrated.\n\n\n\n\nEnable HasRole Trait And Contract\n\n\nInclude \nHasRole\n trait and also implement \nHasRole\n contract inside your \nUser\n model.\n\n\nuse HttpOz\\Roles\\Traits\\HasRole;\n\n\nuse HttpOz\\Roles\\Contracts\\HasRole as HasRoleContract;\n\n\n\nclass User extends Authenticatable implements HasRoleContract\n\n\n{\n\n\n    use Notifiable, HasRole;\n\n\n\n\n\nAnd that's it!\n\n\nConfig File\n\n\nYou can change connection for models, slug separator, models path and there is also a handy pretend feature. Have a look at config file for more information.\n\n\nCaching\n\n\nThe configuration for cache expiry is defaulted to 2 weeks (in minutes). You can update this value to suit your project specific needs.",
            "title": "Configuration"
        },
        {
            "location": "/configuration/#register-the-roles-service-provider",
            "text": "Add the package to your application service providers in  config/app.php  file.  'providers' => [      /*       * Laravel Framework Service Providers...       */      Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::class,      Illuminate\\Auth\\AuthServiceProvider::class,      ...      /**       * Package Service Providers...       */      HttpOz\\Roles\\RolesServiceProvider::class,  ],",
            "title": "Register the Roles Service Provider"
        },
        {
            "location": "/configuration/#publish-config-file-and-migrations",
            "text": "Optimize Application  php artisan optimize  Publish the package config file and migrations to your application. Run this command inside your terminal.  php artisan vendor:publish --provider=\"HttpOz\\Roles\\RolesServiceProvider\"  And also run migrations.  php artisan migrate   This uses the default users table which is in Laravel. You should already have the migration file for the users table available and migrated.",
            "title": "Publish Config File And Migrations"
        },
        {
            "location": "/configuration/#enable-hasrole-trait-and-contract",
            "text": "Include  HasRole  trait and also implement  HasRole  contract inside your  User  model.  use HttpOz\\Roles\\Traits\\HasRole;  use HttpOz\\Roles\\Contracts\\HasRole as HasRoleContract;  class User extends Authenticatable implements HasRoleContract  {      use Notifiable, HasRole;   And that's it!",
            "title": "Enable HasRole Trait And Contract"
        },
        {
            "location": "/configuration/#config-file",
            "text": "You can change connection for models, slug separator, models path and there is also a handy pretend feature. Have a look at config file for more information.",
            "title": "Config File"
        },
        {
            "location": "/configuration/#caching",
            "text": "The configuration for cache expiry is defaulted to 2 weeks (in minutes). You can update this value to suit your project specific needs.",
            "title": "Caching"
        },
        {
            "location": "/roles/creating-roles/",
            "text": "Use Case\n\n\nWe will be creating an Admin and Forum Moderator role.\n\n\n\n\nFirst we need to create the seeder file using \nphp artisan\n.\n\n    php artisan make:seeder UserRolesSeeder\n\n\n\nDefine roles in seeder file\n\n\nIn the seeder file we created above, which should be located at \ndatabase\\seeds\\UserRolesSeeder.php\n, we will define the roles in the \nrun\n method.\n\n\n    \\HttpOz\\Roles\\Models\\Role::create([\n\n\n        'name' => 'Admin',\n\n\n        'slug' => 'admin',\n\n\n        'description' => 'Custodians of the system.', // optional\n\n\n        'group' => 'default' // optional, set as 'default' by default\n\n\n    ]);\n\n\n\n    \\HttpOz\\Roles\\Models\\Role::create([\n\n\n        'name' => 'Forum Moderator',\n\n\n        'slug' => 'forum.moderator',\n\n\n    ]);\n\n\n\n\n\n\n\nTip\n\n\nBecause of Sluggable trait, if you make a mistake and for example leave a space in slug parameter, it will be replaced with a dot automatically, because of str_slug function.\n\n\n\n\nSeeding the created Roles\n\n\nTo be able to call the UserRolesSeeder when we run \nphp artisan db:seed\n we need to add it to the run method in the \ndatabase\\seeds\\DatabaseSeeder.php\n file.\n\n\n    $this->call(UserRolesSeeder::class);\n\n\n\n\n\nWhen we run db:seed in php artisan the roles will be created in the database.\n\n\n    php artisan db:seed",
            "title": "Creating Roles"
        },
        {
            "location": "/roles/creating-roles/#define-roles-in-seeder-file",
            "text": "In the seeder file we created above, which should be located at  database\\seeds\\UserRolesSeeder.php , we will define the roles in the  run  method.      \\HttpOz\\Roles\\Models\\Role::create([          'name' => 'Admin',          'slug' => 'admin',          'description' => 'Custodians of the system.', // optional          'group' => 'default' // optional, set as 'default' by default      ]);      \\HttpOz\\Roles\\Models\\Role::create([          'name' => 'Forum Moderator',          'slug' => 'forum.moderator',      ]);    Tip  Because of Sluggable trait, if you make a mistake and for example leave a space in slug parameter, it will be replaced with a dot automatically, because of str_slug function.",
            "title": "Define roles in seeder file"
        },
        {
            "location": "/roles/creating-roles/#seeding-the-created-roles",
            "text": "To be able to call the UserRolesSeeder when we run  php artisan db:seed  we need to add it to the run method in the  database\\seeds\\DatabaseSeeder.php  file.      $this->call(UserRolesSeeder::class);   When we run db:seed in php artisan the roles will be created in the database.      php artisan db:seed",
            "title": "Seeding the created Roles"
        },
        {
            "location": "/roles/assigning-roles/",
            "text": "Assigning roles has 2 very simple use cases - when you are creating a user or when attaching a role to an existing user (\nexplained here\n).\n\n\nOn creating a user\n\n\nAssuming you are on a fresh install of Laravel, you would need to create a users table seeder. If you are creating users dynamically in a controller, then you do not need to create a seeder file.\n\n\n    php artisan make:seeder UsersTableSeeder\n\n\n\n\nIn the run function of your UsersTableSeeder (or controller), you would need to execute the following 3 steps:\n\n\n    // 1. query the Roles by the slug\n\n\n    $adminRole = \\HttpOz\\Roles\\Models\\Role::findBySlug('admin');\n\n\n    $moderatorRole = \\HttpOz\\Roles\\Models\\Role::findBySlug('forum.moderator');\n\n\n\n    // 2a. Create admin\n\n\n    $admin = \\App\\User::create([\n\n\n        'name' => 'Oscar Mwanandimai',\n\n\n        'email' => 'oscar@github.com',\n\n\n        'password' => bcrypt('password')\n\n\n    ]);\n\n\n\n    // 2b. Create forum moderator\n\n\n    $moderator = \\App\\User::create([\n\n\n        'name' => 'John Doe',\n\n\n        'email' => 'john@github.com',\n\n\n        'password' => bcrypt('password')\n\n\n    ]);\n\n\n\n    // 3. Attach a role to the user object / assign a role to a user\n\n\n    $admin->attachRole($adminRole);\n\n\n    $moderator->attachRole($moderatorRole);\n\n\n\n\n\nIf you took the database seeder route\n\n    php artisan db:seed",
            "title": "Assigning Roles"
        },
        {
            "location": "/roles/assigning-roles/#on-creating-a-user",
            "text": "Assuming you are on a fresh install of Laravel, you would need to create a users table seeder. If you are creating users dynamically in a controller, then you do not need to create a seeder file.      php artisan make:seeder UsersTableSeeder  In the run function of your UsersTableSeeder (or controller), you would need to execute the following 3 steps:      // 1. query the Roles by the slug      $adminRole = \\HttpOz\\Roles\\Models\\Role::findBySlug('admin');      $moderatorRole = \\HttpOz\\Roles\\Models\\Role::findBySlug('forum.moderator');      // 2a. Create admin      $admin = \\App\\User::create([          'name' => 'Oscar Mwanandimai',          'email' => 'oscar@github.com',          'password' => bcrypt('password')      ]);      // 2b. Create forum moderator      $moderator = \\App\\User::create([          'name' => 'John Doe',          'email' => 'john@github.com',          'password' => bcrypt('password')      ]);      // 3. Attach a role to the user object / assign a role to a user      $admin->attachRole($adminRole);      $moderator->attachRole($moderatorRole);   If you took the database seeder route     php artisan db:seed",
            "title": "On creating a user"
        },
        {
            "location": "/roles/querying-roles/",
            "text": "This package offers a couple of ways to query your roles.\n\n\nIf user has role\n\n\n    $user = User::find(1);\n\n\n\n    if ($user->isRole('admin')) { // you can pass an id or slug\n\n\n        // do something\n\n\n    }\n\n\n\n    // or\n\n\n\n    if($user->hasRole('admin')){\n\n\n        // do something\n\n\n    }\n\n\n\n    // or\n\n\n\n    if($user->isAdmin()){\n\n\n        // do something\n\n\n    }\n\n\n\n\n\nIf user has atleast one role\n\n\nIn this case, a user has to have at least one of the given roles. Multiple options have been illustrated below that achieve the same goal.\n\n\n    if ($user->isRole('admin|forum.moderator')) {\n\n\n        // do something\n\n\n    }\n\n\n\n    if($user->isRole('admin, forum.moderator')){\n\n\n        // do something\n\n\n    }\n\n\n\n    if($user->isRole(['admin', 'forum.moderator'])){\n\n\n        // do something\n\n\n    }\n\n\n\n    if($user->isOne('admin|forum.moderator')){\n\n\n        // do something\n\n\n    }\n\n\n\n    if($user->isOne('admin, forum.moderator')){\n\n\n        // do something\n\n\n    }\n\n\n\n    if($user->isOne(['admin', 'forum.moderator'])){\n\n\n        // do something\n\n\n    }\n\n\n\n\n\nIf user has all roles\n\n\nIn this case, a user has to have all the given roles. Multiple options have been illustrated below that achieve the same goal.\n\n\n    if ($user->isRole('admin|forum.moderator', true)) {\n\n\n        // do something\n\n\n    }\n\n\n\n    if($user->isRole('admin, forum.moderator', true)){\n\n\n        // do something\n\n\n    }\n\n\n\n    if($user->isRole(['admin', 'forum.moderator'], true)){\n\n\n        // do something\n\n\n    }\n\n\n\n    if($user->isAll('admin|forum.moderator')){\n\n\n        // do something\n\n\n    }\n\n\n\n    if($user->isAll('admin, forum.moderator')){\n\n\n        // do something\n\n\n    }\n\n\n\n    if($user->isAll(['admin', 'forum.moderator'])){\n\n\n        // do something\n\n\n    }\n\n\n\n\n\nFind users by their role\n\n\nThere are multiple ways to get a list of users by their given role.\n\n\nUsing the role's id\n\n \n   $admins = Role::find(1)->users;\n\n\n\n\nUsing the role's slug\n\n \n   $adminRole = Role::findBySlug('admin');\n\n\n   $admins = $adminRole->users;\n\n\n\n \nUsing the role's group\n\n \n   $adminRole = Role::where('group', 'forum.moderator')->first();\n\n\n   $admins = $adminRole->users;",
            "title": "Querying Roles"
        },
        {
            "location": "/roles/querying-roles/#if-user-has-role",
            "text": "$user = User::find(1);      if ($user->isRole('admin')) { // you can pass an id or slug          // do something      }      // or      if($user->hasRole('admin')){          // do something      }      // or      if($user->isAdmin()){          // do something      }",
            "title": "If user has role"
        },
        {
            "location": "/roles/querying-roles/#if-user-has-atleast-one-role",
            "text": "In this case, a user has to have at least one of the given roles. Multiple options have been illustrated below that achieve the same goal.      if ($user->isRole('admin|forum.moderator')) {          // do something      }      if($user->isRole('admin, forum.moderator')){          // do something      }      if($user->isRole(['admin', 'forum.moderator'])){          // do something      }      if($user->isOne('admin|forum.moderator')){          // do something      }      if($user->isOne('admin, forum.moderator')){          // do something      }      if($user->isOne(['admin', 'forum.moderator'])){          // do something      }",
            "title": "If user has atleast one role"
        },
        {
            "location": "/roles/querying-roles/#if-user-has-all-roles",
            "text": "In this case, a user has to have all the given roles. Multiple options have been illustrated below that achieve the same goal.      if ($user->isRole('admin|forum.moderator', true)) {          // do something      }      if($user->isRole('admin, forum.moderator', true)){          // do something      }      if($user->isRole(['admin', 'forum.moderator'], true)){          // do something      }      if($user->isAll('admin|forum.moderator')){          // do something      }      if($user->isAll('admin, forum.moderator')){          // do something      }      if($user->isAll(['admin', 'forum.moderator'])){          // do something      }",
            "title": "If user has all roles"
        },
        {
            "location": "/roles/querying-roles/#find-users-by-their-role",
            "text": "There are multiple ways to get a list of users by their given role.  Using the role's id \n     $admins = Role::find(1)->users;   Using the role's slug \n     $adminRole = Role::findBySlug('admin');     $admins = $adminRole->users;  \n  Using the role's group \n     $adminRole = Role::where('group', 'forum.moderator')->first();     $admins = $adminRole->users;",
            "title": "Find users by their role"
        },
        {
            "location": "/roles/managing-roles/",
            "text": "There are multiple ways to work with your roles once you have created them. This package provides different ways to manage the relationship between your \nUser\n and \nRole\n models.\n\n\n\n\nMany to Many Relationships\n\n\nRead about many to many relationships in \nLaravel Docs\n.\n\n\n\n\nAttaching Roles\n\n\nAttaching a role a user is as simple as querying the Role model for the desired role and then attaching that role to a given user.\n\n    $adminRole = HttpOz\\Roles\\Models\\Role::findBySlug('admin');\n\n\n    $user = App\\User::find($id);\n\n\n\n    $user->attachRole($adminRole); // you can pass whole object, or just an id\n\n\n\n\nDetaching Roles\n\n\nYou can choose to detach only one role or all the roles assigned to the user object.\n\n    $adminRole = HttpOz\\Roles\\Models\\Role::findBySlug('admin');\n\n\n    $user = App\\User::find($id);\n\n\n\n    $user->detachRole($adminRole); // in case you want to detach one role\n\n\n    $user->detachAllRoles(); // in case you want to detach all roles\n\n\n\n\nSyncing Roles\n\n\nYou may also use the sync method to attach roles to a user model. Any roles that are not passed into the method will be detached from the user's roles. So, after this operation is complete, only the roles passed into the method will be attached to the user:\n\n    $adminRole = HttpOz\\Roles\\Models\\Role::findBySlug('admin');\n\n\n    $user = App\\User::find($id);\n\n\n\n    $roles = [1, 4, 6]; // using the role IDs we want to assign to a user\n\n\n\n    $user->detachRole($adminRole); // in case you want to detach role\n\n\n    $user->syncRoles($roles); // you can pass Eloquent collection, or just an array of ids",
            "title": "Managing Roles"
        },
        {
            "location": "/roles/managing-roles/#attaching-roles",
            "text": "Attaching a role a user is as simple as querying the Role model for the desired role and then attaching that role to a given user.     $adminRole = HttpOz\\Roles\\Models\\Role::findBySlug('admin');      $user = App\\User::find($id);      $user->attachRole($adminRole); // you can pass whole object, or just an id",
            "title": "Attaching Roles"
        },
        {
            "location": "/roles/managing-roles/#detaching-roles",
            "text": "You can choose to detach only one role or all the roles assigned to the user object.     $adminRole = HttpOz\\Roles\\Models\\Role::findBySlug('admin');      $user = App\\User::find($id);      $user->detachRole($adminRole); // in case you want to detach one role      $user->detachAllRoles(); // in case you want to detach all roles",
            "title": "Detaching Roles"
        },
        {
            "location": "/roles/managing-roles/#syncing-roles",
            "text": "You may also use the sync method to attach roles to a user model. Any roles that are not passed into the method will be detached from the user's roles. So, after this operation is complete, only the roles passed into the method will be attached to the user:     $adminRole = HttpOz\\Roles\\Models\\Role::findBySlug('admin');      $user = App\\User::find($id);      $roles = [1, 4, 6]; // using the role IDs we want to assign to a user      $user->detachRole($adminRole); // in case you want to detach role      $user->syncRoles($roles); // you can pass Eloquent collection, or just an array of ids",
            "title": "Syncing Roles"
        },
        {
            "location": "/groups/",
            "text": "When you are creating roles, there is optional parameter \ngroup\n. It is set as \ndefault\n by default, but you can overwrite it and then you can do something like this:\n\n\nif ($user->group() == 'application.managers') {\n\n\n    //\n\n\n}\n\n\n\nif ($user->inGroup('application.managers')) {\n\n\n    // if true do something\n\n\n}\n\n\n\n\n\n\n\nIf user has multiple roles, method \ngroup\n returns the first one in alphabetical order (a better implementation of this will be explored).\n\n\n\n\nGroup\n is intended to collectively organise and assign permissions (Laravel's built in authorization feature) to a role group that can be shared by multiple roles (examples and implementation to be added to documentation in future).",
            "title": "Groups"
        },
        {
            "location": "/middleware/",
            "text": "This package comes with \nVerifyRole\n and \nVerifyGroup\n middleware. You must add them inside your \napp/Http/Kernel.php\n file.\n\n\n/**\n\n\n * The application's route middleware.\n\n\n *\n\n\n * @var array\n\n\n */\n\n\nprotected $routeMiddleware = [\n\n\n\n    // ...\n\n\n\n    'role' => \\HttpOz\\Roles\\Middleware\\VerifyRole::class,\n\n\n    'group' => \\HttpOz\\Roles\\Middleware\\VerifyGroup::class,\n\n\n];\n\n\n\n\n\nNow you can easily protect your routes.\n\n\n$router->get('/example', [\n\n\n    'as' => 'example',\n\n\n    'middleware' => 'role:admin',\n\n\n    'uses' => 'ExampleController@index',\n\n\n]);\n\n\n\n$router->get('/example', [\n\n\n    'as' => 'example',\n\n\n    'middleware' => 'group:application.managers',\n\n\n    'uses' => 'ExampleController@index',\n\n\n]);\n\n\n\n\n\nIt throws \n\\HttpOz\\Roles\\Exceptions\\RoleDeniedException\n or \n\\HttpOz\\Roles\\Exceptions\\GroupDeniedException\n exceptions if it goes wrong.\n\n\nYou can catch these exceptions inside \napp/Exceptions/Handler.php\n file and do whatever you want, example below.",
            "title": "Middleware"
        },
        {
            "location": "/displaying-errors/",
            "text": "Extending from the above, you can control the error page that your application users see when they try to open a page their role is not allowed to. This package already has a view bundled with it that should have been published to \nresources/views/vendor/roles/error.blade.php\n when you published the package. Simply add the below condition inside your \napp\\Exceptions\\Handler.php\n's render function. Feel free to point to another view of your choice.\n\n\n/**\n\n\n     * Render an exception into an HTTP response.\n\n\n     *\n\n\n     * @param  \\Illuminate\\Http\\Request  $request\n\n\n     * @param  \\Exception  $exception\n\n\n     * @return \\Illuminate\\Http\\Response\n\n\n     */\n\n\n    public function render($request, Exception $exception)\n\n\n    {\n\n\n        if ($exception instanceof \\HttpOz\\Roles\\Exceptions\\RoleDeniedException || $exception instanceof \\HttpOz\\Roles\\Exceptions\\GroupDeniedException) {\n\n\n            return response()->view('vendor.roles.error', compact('exception'), 403);\n\n\n        }\n\n\n\n        return parent::render($request, $exception);\n\n\n    }",
            "title": "Displaying Errors"
        },
        {
            "location": "/blade-syntax/",
            "text": "There are two Blade extensions that are basically a replacement for classic if statements.\n\n\n@role('admin') // @if(Auth::check() && Auth::user()->isRole('admin'))\n\n\n    // user is admin\n\n\n@endrole\n\n\n\n@group('application.managers') // @if(Auth::check() && Auth::user()->group() == 'application.managers')\n\n\n    // user belongs to 'application.managers' group\n\n\n@endgroup\n\n\n\n@role('admin|moderator', 'all') // @if(Auth::check() && Auth::user()->isRole('admin|moderator', 'all'))\n\n\n    // user is admin and also moderator\n\n\n@else\n\n\n    // something else\n\n\n@endrole",
            "title": "Blade Syntax"
        }
    ]
}